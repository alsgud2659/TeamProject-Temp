<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pickitup.mapper.user.UserMapper">

    <!--마이페이지, 관리자 사용-->
    <select id="getDetail" resultType="userVO">
        SELECT
        NUM, EMAIL, PASSWORD,NICKNAME,PHONE, ADDRESS, PROFILE_FILE_NAME, PROFILE_UPLOAD_PATH, POINT, REGIST_DATE,CATEGORY,STATUS,APPROVAL
        FROM TBL_USER
        WHERE NUM=#{num}
    </select>

<!--카카오로그인 후 회원정보-->
    <select id="kakaoDetail" resultType="userVO">
        SELECT
        NUM, EMAIL, NICKNAME,PHONE, ADDRESS, PROFILE_FILE_NAME, PROFILE_UPLOAD_PATH, POINT, REGIST_DATE
        FROM TBL_USER
        WHERE EMAIL=#{email}
    </select>

<!--회원 가입-->

    <!--회원 가입-->
    <insert id="insert">
        INSERT INTO TBL_USER
        (NUM, EMAIL, PASSWORD, NICKNAME, PHONE, ADDRESS,ADDRESS_DETAIL, REGIST_DATE)
        VALUES(SEQ_USER.NEXTVAL,#{email}, #{password}, #{nickname}, #{phone}, #{address},#{addressDetail}, SYSDATE)
    </insert>


<!--카카오톡 로그인 즉시 회원가입-->
    <insert id="kakaoinsert">
        <selectKey keyProperty="num" resultType="long" order="BEFORE">
            SELECT SEQ_USER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_USER
        (NUM, EMAIL, NICKNAME, REGIST_DATE)
        VALUES(#{num},#{email}, #{nickname}, SYSDATE)

        </insert>


    <!--회원탈퇴-->
    <delete id="delete">
        DELETE FROM TBL_USER
        WHERE NUM=#{num}
    </delete>

    <update id="adminPwUpdate">
        UPDATE TBL_USER
        SET PASSWORD=#{password}
        WHERE NUM=#{num}
    </update>

    <update id="addPoint">
        UPDATE TBL_USER
        SET POINT=#{point}
        WHERE NICKNAME=#{nickname}
    </update>

    <!--  회원 수정  -->
    <update id="update">
        UPDATE TBL_USER
        SET NICKNAME=#{nickname}, PHONE=#{phone},ADDRESS=#{address},
        ADDRESS_DETAIL=#{addressDetail},PROFILE_FILE_NAME=#{profileFileName}, PROFILE_UPLOAD_PATH=#{profileUploadPath}, REGIST_DATE=SYSDATE
        WHERE NUM=#{num}
    </update>

    <!--    ROWNUM : SELECT문에서 사용되어지는 가상컬럼이다.-->
    <!--    가상컬럼이란 물리적으로 테이블에 저장된 값이 아니라-->
    <!--    SELECT문에서 FROM절과 WHERE절에 의해서 해당 데이타가-->
    <!--    선별된 직후에 1부터 차례대로 증가하면서 부여된 일시적인 값이다.-->
    <!--    - ROWNUM은 1,2,3,....N 값이 부여된다.-->
    <!--    - ROWNUM은 일시적으로 할당되는 값이다.-->
    <!--    - ROWNUM은 값이 할당되어지는 순서가 있다.-->


    <!-- 사용자가 구매한 상품 목록-->
    <select id="getInProductList" resultType="productVO">
        <![CDATA[
        SELECT prod.NUM, prod.NAME, prod.CONTENT, prod.CATEGORY, prod.PRICE, prod.STOCK, prod.ORIGIN, prod.MANUFACTURER, prod.SUPPLIER, prod.REGIST_DATE, prod.STATUS, prod.JJIM_COUNT
	        FROM TBL_PRODUCT prod
	            INNER JOIN TBL_ORDER ord ON ord.PRODUCT_NUM = prod.NUM
	            INNER JOIN TBL_USER u ON u.NUM = ord.USER_NUM
            WHERE u.NUM = #{userNum} AND ROWNUM < 10
        ORDER BY ord.NUM DESC
        ]]>
    </select>

    <!-- 사용자가 참여한 플로깅 목록 -->
    <select id="getInProjectList" resultType="projectVO">
        <![CDATA[
        SELECT proj.NUM, proj.TITLE, proj.CONTENT, proj.COURSE, proj.TERRAIN, proj.POINT, proj.APPROVAL, proj.STARTTIME, proj.ENDTIME, proj.START_ADDRESS, proj.END_ADDRESS, proj.DISTANCE, proj.START_QR, proj.REGIST_DATE, proj.UPDATE_DATE, proj.STATUS, proj.COMPANY_NUM, proj.JJIM_COUNT, proj.PROJECT_DATE
	        FROM TBL_PROJECT proj
	            INNER JOIN TBL_APPLY app ON app.PROJECT_NUM = proj.NUM
	            INNER JOIN TBL_USER u ON u.NUM = app.USER_NUM
            WHERE u.NUM = #{userNum} AND ROWNUM < 10
        ORDER BY app.NUM  DESC
        ]]>
    </select>

    <select id="login" resultType="userDTO">
        SELECT NUM, NICKNAME, CATEGORY, EMAIL
        FROM
        (
        SELECT NUM, NICKNAME, CATEGORY, PASSWORD ,EMAIL
        FROM TBL_USER
        UNION ALL
        SELECT NUM, NICKNAME, CATEGORY , PASSWORD, EMAIL
        FROM TBL_COMPANY
        )
        WHERE EMAIL=#{email} AND PASSWORD=#{password}
    </select>


<!--   해당 유저가 참여한 프로젝트에서 필요한 정보-->
    <select id="getQrInfo" resultType="qrDTO">
        SELECT TBL_USER.NUM AS USERNUM, TBL_USER.POINT AS USERPOINT,TBL_APPLY.PROJECT_NUM AS PROJECTNUM, TBL_PROJECT.POINT AS ADDPOINT,TBL_PROJECT.APPROVAL AS PROJECTAPPROVAL,TBL_PROJECT.START_QR AS STARTQR,TBL_PROJECT.END_QR AS ENDQR,TBL_APPLY.NUM AS APPLYNUM,TBL_APPLY.APPROACH as APPROACH
        FROM TBL_USER,TBL_APPLY,TBL_PROJECT
        WHERE TBL_USER.NUM = TBL_APPLY.USER_NUM
        AND TBL_APPLY.PROJECT_NUM =TBL_PROJECT.NUM
        AND TBL_USER.NUM = #{userNum}
    </select>





<!--이메일 중복 체크-->
    <select id="emailMatching" resultType="_int">
        SELECT COUNT(EMAIL)
        FROM
            (SELECT EMAIL
            FROM TBL_USER
            UNION
            SELECT EMAIL
            FROM TBL_COMPANY )
        WHERE EMAIL=#{email}
    </select>


    <!--닉네임 중복 체크-->
    <select id="nicknameMatching" resultType="_int">
        SELECT COUNT(NICKNAME)
        FROM
            (SELECT NICKNAME
            FROM TBL_USER
            UNION
            SELECT NICKNAME
            FROM TBL_COMPANY )
        WHERE NICKNAME=#{nickname}
    </select>

    <select id="getList"  resultType="userDTO">
        SELECT NUM,NICKNAME,EMAIL,REGIST_DATE ,PHONE,ADDRESS,CATEGORY,POINT,STATUS,APPROVAL
        FROM
        (
        SELECT ROWNUM RN,NUM,NICKNAME,EMAIL,REGIST_DATE ,PHONE,ADDRESS,CATEGORY,POINT,STATUS,APPROVAL
        FROM(
        SELECT
        NUM,NICKNAME,EMAIL,REGIST_DATE ,PHONE,ADDRESS,CATEGORY,POINT,STATUS,APPROVAL
        FROM TBL_USER
        <where>
            <if test="type1 == 'nickname'.toString()">
                NICKNAME LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type1 == 'phone'.toString()">
                AND PHONE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="keyword1 != null">
                AND ADDRESS LIKE '%'||#{keyword1}||'%'
            </if>
            <if test="startDate != null and endDate != null">
                AND (REGIST_DATE BETWEEN #{startDate} AND #{endDate})
            </if>
        </where>
        UNION ALL
        SELECT
        NUM,NICKNAME,EMAIL,REGIST_DATE ,PHONE,ADDRESS,CATEGORY,POINT,STATUS,APPROVAL
        FROM TBL_COMPANY
        <where>
            <if test="type1 == 'nickname'.toString()">
                NICKNAME LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type1 == 'phone'.toString()">
                AND PHONE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="keyword1 != null">
                AND ADDRESS LIKE '%'||#{keyword1}||'%'
            </if>
            <if test="startDate != null">
                AND (REGIST_DATE BETWEEN #{startDate} AND #{endDate})
            </if>
        </where>
        )
        <![CDATA[
        WHERE ROWNUM <= #{pageNum} * #{amount}
            ]]>
        <choose>
            <when test="type == 'user'.toString()">
                AND CATEGORY = 'user'
            </when>
            <when test="type == 'company'.toString()">
                AND CATEGORY = 'company'
            </when>
        </choose>
        )
        <![CDATA[
    WHERE RN > (#{pageNum} - 1) * #{amount}
        ]]>
        ORDER BY REGIST_DATE DESC

    </select>

    <update id="autoPoint">
        UPDATE TBL_USER
        SET POINT=#{point}
        WHERE NUM=#{userNum}
    </update>

    <!-- 위 테이블의 총 개수-->
    <select id="getTotal" resultType="_int">
        SELECT SUM(CNT) FROM
        (   SELECT COUNT(*) AS CNT
        FROM TBL_USER
        <where>
            <if test="type1 == 'nickname'.toString()">
                NICKNAME LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type1 == 'phone'.toString()">
                AND PHONE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="startDate != null">
                AND (REGIST_DATE BETWEEN #{startDate} AND #{endDate})
            </if>
            <if test="keyword1 != null">
                AND ADDRESS LIKE '%'||#{keyword1}||'%'
            </if>
        </where>
        <choose>
            <when test="type=='user'.toString()">
                AND CATEGORY='user'
            </when>
            <when test="type=='company'.toString()">
                AND CATEGORY='company'
            </when>
        </choose>
        UNION ALL
        SELECT COUNT(*)
        FROM TBL_COMPANY
        <where>
            <if test="type1 == 'nickname'.toString()">
                NICKNAME LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type1 == 'phone'.toString()">
                AND PHONE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="keyword1 != null">
                AND ADDRESS LIKE '%'||#{keyword1}||'%'
            </if>
            <if test="startDate != null">
                AND (REGIST_DATE BETWEEN #{startDate} AND #{endDate})
            </if>
        </where>
        <choose>
            <when test="type=='user'.toString()">
                AND CATEGORY='user'
            </when>
            <when test="type=='company'.toString()">
                AND CATEGORY='company'
            </when>
        </choose>
        )
    </select>

    <select id="getNoticeList" resultType="adminBoardVO">
     SELECT NUM, TITLE, CATEGORY, CONTENT, USER_NUM, REGIST_DATE, UPDATE_DATE FROM
    (
    SELECT ROWNUM RN, NUM, TITLE, CATEGORY, CONTENT, USER_NUM, REGIST_DATE, UPDATE_DATE
    FROM (
    SELECT NUM, TITLE, CATEGORY, CONTENT, USER_NUM, REGIST_DATE, UPDATE_DATE FROM
    TBL_ADMIN_BOARD
            WHERE CATEGORY = '4' AND STATUS = '1'
            ORDER BY REGIST_DATE DESC
    )
    <![CDATA[
            WHERE ROWNUM <= #{pageNum} * #{amount}
                ]]>
            )
            <![CDATA[
        WHERE RN > (#{pageNum} - 1) * #{amount}
            ]]>
        /*SELECT NUM, TITLE, CATEGORY, CONTENT, USER_NUM, REGIST_DATE, UPDATE_DATE
        FROM TBL_ADMIN_BOARD
        WHERE CATEGORY = '4' AND STATUS = '1'
        ORDER BY REGIST_DATE DESC*/
    </select>

    <select id="getNoticeTotal" resultType="_int">
        SELECT COUNT(NUM) FROM TBL_ADMIN_BOARD WHERE CATEGORY = '4' AND STATUS = '1'
    </select>

    <select id="getNoticeDetail" resultType="adminBoardVO">
        SELECT
        NUM, TITLE, CATEGORY, CONTENT, REGIST_DATE, UPDATE_DATE, STATUS, USER_NUM
        FROM TBL_ADMIN_BOARD
        WHERE NUM = #{num}
    </select>

    <insert id="write">
        <selectKey keyProperty="num" resultType="long" order="BEFORE">
            SELECT SEQ_ADMIN_BOARD.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_ADMIN_BOARD
        (NUM, CATEGORY, TITLE, CONTENT, USER_NUM, STATUS, ANSWER_STATUS, PROJECT_QNA_NUM, PRODUCT_QNA_NUM)
        VALUES(#{num}, '4', #{title}, #{content}, #{userNum}, '1', '1', #{projectQnaNum, jdbcType=VARCHAR}, #{productQnaNum, jdbcType=VARCHAR})
    </insert>

    <!--  회원 수정  -->
    <update id="updatePW">
        UPDATE TBL_USER
        SET PASSWORD=#{password}
        WHERE EMAIL=#{email}
    </update>

    <!-- 마이페이지에서 비밀번호 변경-->
    <update id="changePw">
        UPDATE TBL_USER
        SET PASSWORD=#{password}
        WHERE NUM=#{num}
    </update>

    <!-- ADMINBOARD에 총 게시글 수 가져오기-->
    <select id="getAdminBoardCount" resultType="_int">
        SELECT COUNT(NUM)
        FROM TBL_ADMIN_BOARD
        <where>
            <if test="type3 == 'notice'.toString()">
                CATEGORY = '4'
            </if>
            <if test="type3 == 'createrQna'.toString()">
                AND CATEGORY = '3'
            </if>
            <if test="type3 == 'productQna'.toString()">
                AND CATEGORY = '2'
            </if>
            <if test="type3 == 'projectQna'.toString()">
                AND CATEGORY = '1'
            </if>
            <if test="type1 == 'noAnswer'.toString()">
                AND ANSWER_STATUS = '1'
            </if>
            <if test="type1 == 'answer'.toString()">
                AND ANSWER_STATUS = '2'
            </if>
            <if test="type2 == 'title'.toString()">
                AND TITLE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'content'.toString()">
                AND CONTENT LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'writer'.toString()">
                AND WRITER LIKE '%'||#{keyword}||'%'
            </if>
            <if test="startDate != null and endDate !=null">
                AND (TO_CHAR(REGIST_DATE,'yyyy-mm-dd hh24:mi:ss')) BETWEEN
                #{startDate} AND (#{endDate}||'23:59:59')
            </if>
        </where>
    </select>

    <!-- ADMINBOARD에 게시글 리스트 가져오기-->
    <select id="getAdminboardList" resultType="adminboardDTO">
        SELECT B.* FROM(
        SELECT ROWNUM RN, A.* FROM
        (SELECT
        TBL_USER.NICKNAME, TBL_ADMIN_BOARD.CATEGORY,
        TBL_ADMIN_BOARD.USER_NUM,TBL_ADMIN_BOARD.ANSWER_STATUS, TBL_ADMIN_BOARD.STATUS ,TBL_ADMIN_BOARD.NUM, TBL_ADMIN_BOARD.PROJECT_QNA_NUM, TBL_ADMIN_BOARD.PRODUCT_QNA_NUM,
        TBL_ADMIN_BOARD.TITLE, TBL_ADMIN_BOARD.CONTENT, TBL_ADMIN_BOARD.REGIST_DATE FROM TBL_ADMIN_BOARD, TBL_USER
        WHERE TBL_ADMIN_BOARD.USER_NUM = TBL_USER.NUM
            <if test="type3 == 'notice'.toString()">
                AND TBL_ADMIN_BOARD.CATEGORY = '4'
            </if>
            <if test="type3 == 'createrQna'.toString()">
                AND TBL_ADMIN_BOARD.CATEGORY = '3'
            </if>
            <if test="type3 == 'productQna'.toString()">
                AND TBL_ADMIN_BOARD.CATEGORY = '2'
            </if>
            <if test="type3 == 'projectQna'.toString()">
                AND TBL_ADMIN_BOARD.CATEGORY = '1'
            </if>
            <if test="type1 == 'noAnswer'.toString()">
                AND ANSWER_STATUS = '1'
            </if>
            <if test="type1 == 'answer'.toString()">
                AND ANSWER_STATUS = '2'
            </if>
            <if test="type2 == 'title'.toString()">
                AND TBL_ADMIN_BOARD.TITLE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'content'.toString()">
                AND TBL_ADMIN_BOARD.CONTENT LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'writer'.toString()">
                AND TBL_USER.NICKNAME LIKE '%'||#{keyword}||'%'
            </if>
            <if test="startDate != null and endDate !=null">
                AND (TO_CHAR(TBL_ADMIN_BOARD.REGIST_DATE,'yyyy-mm-dd hh24:mi:ss')) BETWEEN
                #{startDate} AND (#{endDate}||'23:59:59')
            </if>
            ORDER BY TBL_ADMIN_BOARD.REGIST_DATE DESC
        )A
        <![CDATA[
            WHERE ROWNUM <= #{pageNum} * #{amount}
                ]]>
        )B
        <![CDATA[
        WHERE RN > (#{pageNum} - 1) * #{amount}
            ]]>

        <!--SELECT NUM, CATEGORY, CONTENT, TITLE, REGIST_DATE, USER_NUM, ANSWER_STATUS, STATUS
        FROM TBL_ADMIN_BOARD

        <where>
            <if test="type3 == 'notice'.toString()">
                CATEGORY = '4'
            </if>
            <if test="type3 == 'createrQna'.toString()">
                AND CATEGORY = '3'
            </if>
            <if test="type3 == 'productQna'.toString()">
                AND CATEGORY = '2'
            </if>
            <if test="type3 == 'projectQna'.toString()">
                AND CATEGORY = '1'
            </if>
            <if test="type2 == 'title'.toString()">
                AND TITLE LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'content'.toString()">
                AND CONTENT LIKE '%'||#{keyword}||'%'
            </if>
            <if test="type2 == 'writer'.toString()">
                AND WRITER LIKE '%'||#{keyword}||'%'
            </if>
            <if test="startDate != null and endDate !=null">
                AND (TO_CHAR(REGIST_DATE,'yyyy-mm-dd hh24:mi:ss')) BETWEEN
                #{startDate} AND (#{endDate}||'23:59:59')
            </if>
        </where>

        ORDER BY REGIST_DATE DESC-->

    </select>

    <delete id="deleteById">
        DELETE FROM TBL_ADMIN_BOARD
        WHERE NUM=#{num}
    </delete>

    <delete id="productQnaDelete">
        DELETE FROM TBL_PRODUCT_QNA
        WHERE NUM=(SELECT PRODUCT_QNA_NUM FROM TBL_ADMIN_BOARD WHERE TBL_ADMIN_BOARD.NUM = #{num})
    </delete>

    <delete id="projectQnaDelete">
        DELETE FROM TBL_PROJECT_QNA
        WHERE NUM=(SELECT PROJECT_QNA_NUM FROM TBL_ADMIN_BOARD WHERE TBL_ADMIN_BOARD.NUM = #{num})
    </delete>

    <update id="noticeCancel">
        UPDATE TBL_ADMIN_BOARD
        SET STATUS= '2'
        WHERE NUM=#{num}
    </update>

    <update id="noticeConfirm">
        UPDATE TBL_ADMIN_BOARD
        SET STATUS= '1'
        WHERE NUM=#{num}
    </update>

    <select id="getQnaReply" resultType="adminboardDTO">
        SELECT TBL_USER.NICKNAME, TBL_ADMIN_BOARD.NUM, TBL_ADMIN_BOARD.TITLE, TBL_ADMIN_BOARD.CONTENT, TBL_ADMIN_BOARD.REGIST_DATE, TBL_ADMIN_BOARD.CATEGORY, TBL_ADMIN_BOARD.PROJECT_QNA_NUM, TBL_ADMIN_BOARD.PRODUCT_QNA_NUM
        FROM TBL_USER, TBL_ADMIN_BOARD
        WHERE TBL_USER.NUM = TBL_ADMIN_BOARD.USER_NUM
        AND TBL_ADMIN_BOARD.NUM = #{num}
    </select>


<!--    관리자용 유저 활성/비화성화 업데이트-->
    <update id="userStatusEnable">
        UPDATE TBL_USER
        SET STATUS = '1'
        WHERE NUM=#{num}
    </update>

    <update id="userStatusDisable">
        UPDATE TBL_USER
        SET STATUS = '0'
        WHERE NUM=#{num}
    </update>

<!--    관리자용 승인/거절상태 업데이트-->
    <update id="userApprovalEnable">
        UPDATE TBL_USER
        SET APPROVAL = '1'
        WHERE NUM=#{num}
    </update>

    <update id="userApprovalDisable">
        UPDATE TBL_USER
        SET APPROVAL = '0'
        WHERE NUM=#{num}
    </update>

    <insert id="projectQnaReply">
        <selectKey keyProperty="num" resultType="long" order="BEFORE">
            SELECT SEQ_PROJECT_QNA_COMMENT.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_PROJECT_QNA_COMMENT
        (NUM, CONTENT, USER_NUM, COMPANY_NUM, QNA_NUM)
        VALUES(#{num}, #{content}, #{userNum, jdbcType=VARCHAR}, #{companyNum, jdbcType=VARCHAR}, #{qnaNum, jdbcType=VARCHAR})
    </insert>

    <insert id="productQnaReply">
        <selectKey keyProperty="num" resultType="long" order="BEFORE">
            SELECT SEQ_PRODUCT_QNA_COMMENT.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_PRODUCT_QNA_COMMENT
        (NUM, CONTENT, USER_NUM, QNA_NUM)
        VALUES(#{num}, #{content}, #{userNum, jdbcType=VARCHAR}, #{qnaNum, jdbcType=VARCHAR})
    </insert>

    <update id="answerComplete">
        UPDATE TBL_ADMIN_BOARD
        SET ANSWER_STATUS= '2'
        WHERE NUM=#{num}
    </update>

    <insert id="qnaStoreSave" parameterType="adminQnaDTO">
    <selectKey keyProperty="num" resultType="long" order="BEFORE">
        SELECT SEQ_ADMIN_BOARD.NEXTVAL FROM DUAL
    </selectKey>
    INSERT INTO TBL_ADMIN_BOARD
    (NUM, CATEGORY, TITLE, CONTENT, USER_NUM, STATUS, ANSWER_STATUS, PROJECT_QNA_NUM, PRODUCT_QNA_NUM)
    VALUES(#{num}, '2',
        (SELECT DISTINCT TBL_PRODUCT.NAME NAME FROM TBL_PRODUCT,TBL_PRODUCT_QNA  WHERE TBL_PRODUCT_QNA.PRODUCT_NUM = TBL_PRODUCT.NUM AND TBL_PRODUCT.NUM =#{productNum}),
         #{content}, #{userNum}, '1', '1', #{projectQnaNum, jdbcType=VARCHAR}, (SELECT TBL_PRODUCT_QNA.NUM FROM TBL_PRODUCT_QNA  WHERE TBL_PRODUCT_QNA.NUM =(SELECT DISTINCT FIRST_VALUE(NUM) OVER (ORDER BY REGIST_DATE DESC) FROM TBL_PRODUCT_QNA) AND TBL_PRODUCT_QNA.PRODUCT_NUM =#{productNum}))
    </insert>

    <insert id="qnaProjectSave" parameterType="adminQnaDTO">
        <selectKey keyProperty="num" resultType="long" order="BEFORE">
            SELECT SEQ_ADMIN_BOARD.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_ADMIN_BOARD
        (NUM, CATEGORY, TITLE, CONTENT, USER_NUM, STATUS, ANSWER_STATUS, PROJECT_QNA_NUM, PRODUCT_QNA_NUM)
        VALUES(#{num}, '1',
        (SELECT DISTINCT TBL_PROJECT.TITLE NAME FROM TBL_PROJECT,TBL_PROJECT_QNA  WHERE TBL_PROJECT_QNA.PROJECT_NUM = TBL_PROJECT.NUM AND TBL_PROJECT.NUM =#{projectNum}),
        #{content}, #{userNum}, '1', '1', (SELECT TBL_PROJECT_QNA.NUM FROM TBL_PROJECT_QNA  WHERE TBL_PROJECT_QNA.NUM =(SELECT DISTINCT FIRST_VALUE(NUM) OVER (ORDER BY REGIST_DATE DESC) FROM TBL_PROJECT_QNA) AND TBL_PROJECT_QNA.PROJECT_NUM =#{projectNum}) ,#{productQnaNum, jdbcType=VARCHAR})
    </insert>

    <update id="qnaStoreModify">
        UPDATE TBL_ADMIN_BOARD
        SET
        CONTENT =#{content},
        UPDATE_DATE=SYSDATE
        WHERE PRODUCT_QNA_NUM =#{num}
    </update>

    <update id="qnaProjectModify">
        UPDATE TBL_ADMIN_BOARD
        SET
        CONTENT =#{content},
        UPDATE_DATE=SYSDATE
        WHERE PROJECT_QNA_NUM =#{num}
    </update>

    <select id="getMyProjectQna" resultType="projectQnaVO">
        SELECT NUM, CONTENT, REGIST_DATE, UPDATE_DATE, USER_NUM, PROJECT_NUM
        FROM TBL_PROJECT_QNA
        WHERE USER_NUM = #{userNum}
    </select>

    <select id="getMyProductQna" resultType="productQnaVO">
        SELECT NUM, CONTENT, REGIST_DATE, UPDATE_DATE, USER_NUM, PRODUCT_NUM
        FROM TBL_PRODUCT_QNA
        WHERE USER_NUM = #{userNum}
    </select>

    <select id="myProjectQnaComment" resultType="projectQnaCommentVO">
        SELECT NUM, CONTENT, REGIST_DATE, UPDATE_DATE, USER_NUM, COMPANY_NUM, QNA_NUM
        FROM TBL_PROJECT_QNA_COMMENT
        WHERE QNA_NUM = #{qnaNum}
    </select>

    <select id="myProductQnaComment" resultType="productQnaCommentVO">
        SELECT NUM, CONTENT, REGIST_DATE, UPDATE_DATE, USER_NUM, QNA_NUM
        FROM TBL_PRODUCT_QNA_COMMENT
        WHERE QNA_NUM = #{qnaNum}
    </select>

    <select id="myAllReview" resultType="myReviewDTO">
    (SELECT tpr.CONTENT,tpr.UPDATE_DATE, tp.NAME AS TITLE, tpr.NUM as NUM
    FROM TBL_PRODUCT_REVIEW tpr, TBL_PRODUCT tp
    WHERE tpr.PRODUCT_NUM = tp.NUM AND tpr.USER_NUM = #{userNum}
    UNION
    SELECT tpr2.CONTENT,tpr2.UPDATE_DATE, tp2.TITLE, tpr2.NUM as NUM
    FROM TBL_PROJECT_REVIEW tpr2, TBL_PROJECT tp2
    WHERE tpr2.PROJECT_NUM =tp2.NUM AND tpr2.USER_NUM = #{userNum})
    ORDER BY UPDATE_DATE DESC
    </select>
</mapper>



















